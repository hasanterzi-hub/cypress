/// <reference types="cypress" />
import { faker } from '@faker-js/faker';
import PortfoliDetail from "../../pages/PortfolioDetail"

describe('This test suite includes QuickProposal page. Portfolio creation by quick proposal tool.', () => {
    var portfolioRandomName = faker.finance.accountName()+' ' + faker.finance.accountNumber(5)
    const pd = new PortfoliDetail()

    beforeEach(() => {
        cy.visit(Cypress.env('devIdpPlans'));
        cy.ProductSubscriptionLogin('Deluxe Yearly (P+ & I+ & SS+)')
        cy.wait(5000)
        cy.log('LY.PA.QP.01 - Check when the user clicks the Quick Proposal to go to Quick Proposal page.')
        cy.get('[href="' + Cypress.env('baseHREF') + 'pa-quick-proposal"] > span').should('have.text', 'Quick Proposal').click()
        cy.url().should('include', 'pa-quick-proposal')
        cy.wait(2000)
    })

    context('Yearly Subscriptions', () => {

        it('Testing elements and funtioanility of Quick Proposal page', () => {

            cy.log('LY.PA.QP.TR/TF.01 - Check the Quick Proposal page.')
            cy.get('.content > span').should('exist').and('have.text', 'Quick Proposal')
            cy.get('.primary').as('Save').should('have.attr', 'type', 'button').and('have.text', 'Save Portfolio')
            cy.get('.secondary').as('Discard').should('have.attr', 'type', 'button').and('have.text', 'Discard')
            cy.log('Default values of Tax Rate for new subscribed user')
            cy.verifyTextPresent('Ordinary Income Tax Rate')
            cy.get('#ordinaryIncomeTax').should('have.value', '35.00%')
            cy.verifyTextPresent('Capital Gains Tax Rate')
            cy.get('#capitalGainsTax').should('have.value', '15.00%')
            cy.get('.question').should('exist').click()
            cy.get('.large').should('have.text', 'Quick Proposal')
            cy.verifyTextPresent('Quick Proposal is a quick and easy way to generate Taxficient Scores® for your client within seconds.')
            cy.verifyTextPresent('The defaults for the Ordinary Income Tax Rate and Capital Gains Tax Rate are stored in Settings and may be overridden on this page.')
            cy.verifyTextPresent('Asset Allocations are selected from 5 standard models.')
            cy.verifyTextPresent('Taxficient Scores® are generated by selecting asset allocations and entering account balances for each type of account. Each can be changed or adjusted at any time, and the Taxficient Scores will change to reflect any edits.')
            cy.verifyTextPresent('The results highlight the difference in after-tax return for the portfolio as it currently stands, versus best and worst case layouts of the current portfolio allocation across the underlying accounts. The benefit amount reflects the potential increased balance over a 10-year period if the portfolio were moved from the current Taxficient Score® to the maximum Taxficient score (100).')
            cy.verifyTextPresent('A scenario entered on the Quick Proposal page can be saved as a new portfolio, after which it will appear in the Portfolios page.')
            cy.get('.ui > .close').should('exist').click()
            cy.get('.large').should('not.exist')

            cy.get(':nth-child(2) > .center > .ui').should('have.text', 'Account Balances')
            cy.verifyTextPresent('Taxable Balance')
            cy.verifyTextPresent('Tax-Deferred Balance')
            cy.verifyTextPresent('Tax-Free Balance')
            cy.get('#taxableBalance').as('taxable').should('not.have.value')
            cy.get(':nth-child(1) > :nth-child(2) > .chartAllocationLabel > .chartAllocationButton').should('exist').and('have.text', 'Select Allocation')
            cy.get('#taxDeferredBalance').as('taxdeferred').should('not.have.value')
            cy.get(':nth-child(3) > :nth-child(2) > .chartAllocationLabel > .chartAllocationButton').should('exist').and('have.text', 'Select Allocation')
            cy.get('#taxFreeBalance').as('taxfree').should('not.have.value')
            cy.get(':nth-child(5) > .chartAllocationLabel > .chartAllocationButton').should('exist').and('have.text', 'Select Allocation')
            cy.get('.twelve > div > .ui').should('have.text', 'Taxficient Score®')
            cy.get('[width="16"] > .four > div > .ui').should('exist').and('have.text', 'Portfolio Allocation')

            cy.log('LY.PA.QP.TFS.01 - Check the Taxficient score section when the user visits the Quick Proposal page for the first time (No Balance(s) entered, no allocation(s) selected)')
            cy.verifyTextPresent('Worst')
            
            cy.get(':nth-child(2) > .ui > :nth-child(3) > label').should('have.text', ' After-Tax Return')
            cy.log('LY.PA.QP.TFS.WT.02')
            cy.get(':nth-child(2) > .ui > :nth-child(4) > label').should('have.text', '0.00%')
            cy.log('LY.PA.QP.TFS.WT.01')
            cy.get('[horizonalalign="middle"] > :nth-child(2) > .ui > :nth-child(2)').should('be.visible').compareSnapshot({
                name: 'WorstDefaultScore',
                testThreshold: 0.01,
               recurseOptions: { limit: 3, delay: 500 }
            })
            cy.log('LY.PA.QP.TFS.CT.01, LY.PA.QP.TFS.CT.02, LY.PA.QP.TFS.CT.04, LY.PA.QP.TFS.CT.05')
            cy.verifyTextPresent('Current')
            cy.get(':nth-child(3) > .ui > :nth-child(3) > label').should('have.text', ' After-Tax Return')
            cy.get(':nth-child(3) > .ui > :nth-child(4) > label').should('have.text', '0.00%')
            cy.get('[horizonalalign="middle"] > :nth-child(3) > .ui > :nth-child(2)').should('be.visible').compareSnapshot({
                name: 'CurrentDefaultScore',
                testThreshold: 0.01,
                recurseOptions: { limit: 3, delay: 500 }
            })
            cy.log('LY.PA.QP.TFS.BT.01, LY.PA.QP.TFS.BT.02, LY.PA.QP.TFS.BT.04, LY.PA.QP.TFS.BT.05')
            cy.verifyTextPresent('Best')
            cy.get(':nth-child(4) > .ui > :nth-child(3) > label').should('have.text', ' After-Tax Return')
            cy.get(':nth-child(4) > .ui > :nth-child(4) > label').should('have.text', '0.00%')
            cy.get(':nth-child(5) > [style="font-size: 25px;"]').should('have.text', ' $0')
            cy.get('[horizonalalign="middle"] > :nth-child(4) > .ui > :nth-child(2)').should('be.visible').compareSnapshot({
                name: 'BestDefaultScore',
                testThreshold: 0.01,
                recurseOptions: { limit: 3, delay: 500 }
            })
            cy.verifyTextPresent('Your Taxficient Score® Analysis')
            cy.verifyTextPresent('A Taxficient Score® measures the tax efficiency of an investment portfolio, on a scale from 0 to 100. A score of 100 means giving up as little as possible in taxes on investment returns, leading to a higher balance over time.')


            cy.log('LY.PA.QP.AB.08 - Verify capital gain tax rate can not be more than ordinary income tax rate')
            cy.get('#ordinaryIncomeTax').clear().type('1')
            cy.get('#capitalGainsTax').should('have.value', '15.00%')
            cy.get('@Save').click()
            cy.get('.small > .header').should('exist').and('have.text', 'Validation')
            cy.verifyTextPresent('Ordinary Income Tax Rate cannot be lower than Capital Gains Tax Rate')
            cy.verifyTextPresent('Please enter at least one balance and select at least one allocation')
            cy.get('.actions > .ui').should('have.attr', 'type', 'button').and('have.text', 'Close').click()
            
            cy.log('LY.PA.QP.TR/TF.02 - Check the Ordinary Income Tax Rate field in the Quick Proposal page.')
            cy.get('#ordinaryIncomeTax').clear().type('+-ab9999')
            cy.get('#ordinaryIncomeTax').should('have.value','99.00%')
            cy.get('#ordinaryIncomeTax').clear()

            cy.log('LY.PA.QP.TR/TF.03 - Check the Capital Gains Tax Rate field in the Quick Proposal page.')
            cy.verifyValidationMessage('Income Tax Rate is required')
            cy.get('#capitalGainsTax').clear().type('+-ab9999')
            cy.get('#capitalGainsTax').should('have.value','99.00%')
            cy.get('#capitalGainsTax').clear()
            cy.verifyValidationMessage('Capital Gains Tax Rate is required')
            cy.get('@Save').click()
            cy.get('.small > .header').should('have.text','Validation')
            cy.log('LY.PA.QP.AB.05 - Check validation messages with blank tax rates, blank all tax types')
            cy.get('.small > .grid > :nth-child(1) > .column > :nth-child(1)').should('have.text',' Capital Gains Tax Rate is required')
            cy.get('.small > .grid > :nth-child(1) > .column > :nth-child(2)').should('have.text',' Ordinary Income Tax Rate is required')
            cy.verifyTextPresent('Please enter at least one balance and select at least one allocation')
            cy.clickToText('Close')


            cy.log('LY.PA.QP.AB.03 - Check the maximum balance allowed in the Tax Type (Taxable/Tax-Deferred/Tax-Free) balances fields')
            cy.get('@taxable').type('99999999999')
            cy.get('@taxable').should('have.value','$9,999,999,999')
            cy.get('@taxdeferred').type('99999999999')
            cy.get('@taxdeferred').should('have.value','$9,999,999,999')
            cy.get('@taxfree').type('99999999999')
            cy.get('@taxfree').should('have.value','$9,999,999,999')
            cy.get('@Save').click()
            cy.log('LY.PA.QP.AB.06 - Check when the user has no Ordinary Income and Capital Gain Tax Rate field  but at least one balance has number')
            cy.get('.small > .grid > :nth-child(1) > .column > :nth-child(1)').should('have.text',' Capital Gains Tax Rate is required')
            cy.get('.small > .grid > :nth-child(1) > .column > :nth-child(2)').should('have.text',' Ordinary Income Tax Rate is required')
            cy.get('.ui > .close').click()

            cy.log('LY.PA.QP.S/D.05 - Discard button remove all changes that happened at Quick Proposal page')
            cy.get('@Discard').click()
            cy.url().should('include', 'pa/dashboard')
            cy.get('[href="' + Cypress.env('baseHREF') + 'pa-quick-proposal"] > span').click()
            cy.get('#ordinaryIncomeTax').should('have.value', '35.00%')
            cy.get('@taxable').should('not.have.value')
            cy.get('@taxdeferred').should('not.have.value')
            cy.get('@taxfree').should('not.have.value')
        })

        it('Default test rate can changeable from settings. Check after-tax return and charts.',()=>{
           
            cy.get('#taxableBalance').type('15000')
            cy.log('LY.PA.QP.SA.01, LY.PA.QP.SA.04')
            cy.get(':nth-child(1) > :nth-child(2) > .chartAllocationLabel > .chartAllocationButton > .blue').as('taxableAllocationEditPen').click()
            cy.wait(500)
            cy.get('.top > .ui > .row > :nth-child(1)').as('100EQ').should('be.visible').compareSnapshot({
                name: 'QP_100EQ',
                testThreshold: 0.01,
                retryOptions: { limit: 3, delay: 500 }
            })
            cy.get('.top > .ui > .row > :nth-child(2)').as('75EQ25BND').should('be.visible').compareSnapshot({
                name: 'QP_75EQ25BND',
                testThreshold: 0.01,
                retryOptions: { limit: 3, delay: 500 }
            })
            cy.get('.top > .ui > .row > :nth-child(3)').as('50EQ50BND').should('be.visible').compareSnapshot({
                name: 'QP_50EQ50BND',
                testThreshold: 0.01,
                retryOptions: { limit: 3, delay: 500 }
            })    
            cy.get('.top > .ui > .row > :nth-child(4)').as('25EQ75BND').should('be.visible').compareSnapshot({
                name: 'QP_25EQ75BND',
                testThreshold: 0.01,
                retryOptions: { limit: 3, delay: 500 }
            })
            cy.get('.top > .ui > .row > :nth-child(5)').as('100BND').should('be.visible').compareSnapshot({
                name: 'QP_100BND',
                testThreshold: 0.01,
                retryOptions: { limit: 3, delay: 500 }
            })
            cy.get('#taxDeferredBalance').type('10000')
            cy.get('#taxFreeBalance').type('5000')
            cy.wait(1500)
            cy.log('LY.PA.QP.TFS.BT.03,LY.PA.QP.TFS.CT.03, LY.PA.QP.TFS.WT.03')
            cy.get(':nth-child(2) > .ui > :nth-child(4) > label').as('worstATR').should('have.text', '7.79%')
            cy.get(':nth-child(3) > .ui > :nth-child(4) > label').as('currentATR').should('have.text', '8.12%')
            cy.get(':nth-child(4) > .ui > :nth-child(4) > label').as('bestATR').should('have.text', '8.72%')
            cy.verifyTextPresent('10-Year Benefit')
            cy.get(':nth-child(5) > [style="font-size: 25px;"]').as('10yearBenefit').should('have.text', ' $3,710')
            cy.get(':nth-child(3) > :nth-child(2) > .chartAllocationLabel > .chartAllocationButton > .blue').as('taxdefAllocationEditPen').click()
            cy.get('@50EQ50BND').click()
            cy.get(':nth-child(5) > .chartAllocationLabel > .chartAllocationButton > .blue').as('taxfreeAllocationEditPen').click()
            cy.get('@100BND').click()
            cy.wait(1000)
            cy.get('[style="text-align: center; height: 210px;"] > canvas').should('be.visible').compareSnapshot({
                name: 'QP_portfolioAllocation',
                testThreshold: 0.01,
                retryOptions: { limit: 3, delay: 500 }
            })
            cy.get('@worstATR').should('have.text', '6.06%')
            cy.get('@currentATR').should('have.text', '6.17%')
            cy.get('@bestATR').should('have.text', '7.09%')
            cy.get('@10yearBenefit').should('have.text', ' $4,945')

            cy.log('Change Income Ordinary Tax Rate and Capital Gain Tax Rate from General page.')
            cy.get('.title > .item').should('have.text','Settings').click()
            cy.wait(1000)
            cy.log('LY.PA.QP.TR/TF.04 - Check the Ordinary Income Tax Rate and Capital Gains Tax Rate after change default values in General/Settings.')
            cy.get('#incomeTaxRate').should('have.value','35.00%').clear().type('20')
            cy.get('#capitalTaxRate').should('have.value','15.00%').clear().type('12.75')
            cy.clickToText('Save Settings')
            cy.verifyServerMessage('Settings Saved')
            cy.wait(4000)
            cy.get('[href="' + Cypress.env('baseHREF') + 'pa-quick-proposal"] > span').should('have.text', 'Quick Proposal').click()
            cy.wait(500)
            cy.get('#ordinaryIncomeTax').should('have.value','20.00%')
            cy.get('#capitalGainsTax').should('have.value','12.75%')

            cy.log('LY.PA.QP.AB.01 - Check the Account Balances section in the Quick Proposal')
            cy.get('#taxableBalance').type('15000')
            cy.get('#taxDeferredBalance').type('10000')
            cy.get('#taxFreeBalance').type('5000')
            cy.get(':nth-child(3) > :nth-child(2) > .chartAllocationLabel > .chartAllocationButton > .blue').as('taxdefAllocationEditPen').click()
            cy.get('@50EQ50BND').click()
            cy.get(':nth-child(5) > .chartAllocationLabel > .chartAllocationButton > .blue').as('taxfreeAllocationEditPen').click()
            cy.get('@100BND').click()
            cy.wait(1000)

            cy.wait(500)
            cy.get(':nth-child(2) > .ui > :nth-child(2) > label').as('worstTaxScore').should('have.text', ' 0 ')
            cy.get('@worstATR').should('have.text', '6.40%')
            cy.get(':nth-child(3) > .ui > :nth-child(2) > label').as('currentTaxScore').should('have.text', ' 16 ')
            cy.get('@currentATR').should('have.text', '6.51%')
            cy.get(':nth-child(4) > .ui > :nth-child(2) > label').as('currentTaxScore').should('have.text', ' 100 ')
            cy.get('@bestATR').should('have.text', '7.10%')
            cy.get('@10yearBenefit').should('have.text', ' $3,213')

            cy.log('Check Portfolio creation popup')
            cy.get('.primary').as('Save').should('have.text', 'Save Portfolio').click()
            cy.log('LY.PA.QP.S/D.01')
            cy.smallHeader('Save Portfolio')
            cy.verifyTextPresent('Portfolio Name')
            cy.verifyTextPresent('Cancel')

            cy.log('LY.PA.QP.S/D.04')
            cy.get('.actions > .primary').should('have.text','Save').click()
            cy.verifyValidationMessage('Portfolio Name is required')
            cy.get('#name').type('51 Character long paragraph can be entered to here but you will get a validation error like you see when you click Save button')
            cy.get('.actions > .primary').should('have.text','Save').click()
            cy.verifyValidationMessage('Portfolio Name should be less than 50 characters')
            cy.get('#name').clear().type('01234567890123456789012345678901234567890123456789')
            cy.verifyTextNotPresent('Portfolio Name should be less than 50 characters')
            cy.get('#name').clear().type(portfolioRandomName)

            cy.log('LY.PA.QP.S/D.02')
            cy.get('.actions > .primary').should('have.text', 'Save').click()
            cy.wait(5000)
            cy.log('Check portfolio detail page which created by QP page.')
            cy.get('.caseHeader > span').should('contain',portfolioRandomName)
            pd.getCurrentBalance().should('have.text', '$30,​000')
            pd.getCurrentTarget().should('have.text','Current')
            pd.getHeldAwayBalance().should('have.text','$0')
            pd.getCurrentTaxScore().should('have.text',' 16 ') //LCAS- 1115
            pd.get10YearBenefit().should('have.text','$3,​213')
            
            pd.getAccountNameVerificationInTable(0,'Tax Free Account','Tax-Free','Trade','$5,000')
            pd.getAccountNameVerificationInTable(1,'Tax-Deferred Account','Tax-Deferred','Trade','$10,000')
            pd.getAccountNameVerificationInTable(2,'Taxable Account','Taxable','Trade','$15,000')

            cy.log('Verify that current portfolio name not creatable by quick proposal page.')
            cy.get('[href="' + Cypress.env('baseHREF') + 'pa-quick-proposal"] > span').should('have.text', 'Quick Proposal').click()
            cy.get('#taxableBalance').type('15000')
            cy.wait(1000)
            cy.get('.primary').as('Save').should('have.text', 'Save Portfolio').click()
            cy.get('#name').type(portfolioRandomName)
            cy.get('.actions > .primary').should('have.text', 'Save').click()
            cy.verifyServerMessage('Portfolio name already exists please choose another name')
            
            cy.log('LY.PA.QP.S/D.03')
            cy.clickToText('Cancel')
            cy.verifyTextNotPresent('Portfolio Name')
            cy.clickToText('Portfolios')
            cy.get(':nth-child(1) > .show-tableCell-mobile').click()
            cy.get('.deletePortfolioButton').click()
            
            cy.verifyTextPresent('Are you sure you want to delete this portfolio?')
            cy.get('.negative').click()
            cy.wait(3000)
            cy.verifyTextNotPresent(portfolioRandomName)
            

            cy.log('Return back setting rate values for other tests.')
            cy.get('.title > .item').should('have.text','Settings').click()
            cy.wait(1000)
            cy.get('#incomeTaxRate').clear().type('35')
            cy.get('#capitalTaxRate').clear().type('15')
            cy.clickToText('Save Settings')
            cy.wait(2500)
        })
    })
})